/*
    This file was auto-generated by the cmaj tool!
    cmajor.dev
*/

// Here's a very simple graph that plays a sine-wave to get you started..
graph MY_JX11  [[main]]
{
    input event std::midi::Message midiIn;  // [[ name: "MIDI input" ]];
    // output event std::midi::Message midiOut;
    output stream float out;

    // Demos volume/frequency parameters
    /*
    input gain.volume;
    input sine.frequencyIn;

    node sine = std::oscillators::Sine (float, 10);
    node gain = std::levels::SmoothedGain (float);

    connection sine -> gain.in;
    connection gain.out -> out;
    connection midiIn -> midiOut;
    */

    let voiceCount = 8;

    node
    {
        voices = Voice[voiceCount];
        voiceAllocator = std::voices::VoiceAllocator (voiceCount);
    }

    connection
    {
        // Convert the midi message to a our std::notes messages and forward to the voice allocator
        midiIn -> std::midi::MPEConverter -> voiceAllocator;

        // Plumb the voice allocator to the voices array
        voiceAllocator.voiceEventOut -> voices.eventIn;
        // voiceAllocator.voiceEventOut -> console;

        // Sum the voices audio out to the output
        voices -> out;
    }
}

graph Voice
{
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    output stream float out;

    node
    {
        noteToFrequency = NoteToFrequency;
        envelope = std::envelopes::FixedASR (0.01f, 0.1f);
        oscillator = std::oscillators::Sine (float32);
        noise = noise_generator::Generator;
    }

    connection
    {
        eventIn -> noteToFrequency -> oscillator.frequencyIn;
        eventIn -> envelope.eventIn;
        // (envelope.gainOut * oscillator.out) -> out;
        (envelope.gainOut * noise.out) -> out;
    }
}

// Determine the note frequency from the pitch (midi note)
processor NoteToFrequency
{
    input event std::notes::NoteOn eventIn;
    output event float32 frequencyOut;

    event eventIn (std::notes::NoteOn e)
    {
        frequencyOut <- std::notes::noteToFrequency (e.pitch);
    }
}

namespace noise_generator
{
    processor Generator 
    {
        output stream float out;

        int noiseSeed = 22222;

        void main()
        {
            loop
            {
                // Generate the next integer pseudorandom number
                noiseSeed = noiseSeed * 196314165 + 907633515;

                // Convert to a signed value
                int temp = int(noiseSeed >> 7) - 16777216;

                // Convert to a floating-point number between -1.0 and 1.0
                out <- float(temp) / 16777216.0f;
                advance();
            }
        }
    }
}

namespace my_oscillator
{

}