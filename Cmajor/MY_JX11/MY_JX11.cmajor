/**
    A simple synth using sine oscillators, showing use of the voice allocator,
    message converter and envelopes
*/

graph MY_JX11  [[main]]
{
    input event std::midi::Message midiIn;
    output stream float out;

    let voiceCount = 8;

    node
    {
        voices = Voice[voiceCount];
        voiceAllocator = std::voices::VoiceAllocator (voiceCount);
    }

    connection
    {
        // Convert the midi message to a our std::notes messages and forward to the voice allocator
        midiIn -> std::midi::MPEConverter -> voiceAllocator;

        // Plumb the voice allocator to the voices array
        voiceAllocator.voiceEventOut -> voices.eventIn;

        // Sum the voices audio out to the output
        voices -> out;
    }
}

graph Voice
{
    input event (std::notes::NoteOn, std::notes::NoteOff) eventIn;
    output stream float out;

    node
    {
        noteToFrequency = NoteToFrequency;
        eventToVelocity = EventToVelocity;
        envelope = std::envelopes::FixedASR (0.01f, 0.1f);
        oscillator = std::oscillators::Sine (float32);
        myOscillator = my_oscillator;
        myStdSine = my_std_sine;
    }

    connection
    {
        /*
        eventIn -> noteToFrequency -> oscillator.frequencyIn;
        eventIn -> envelope.eventIn;
        (envelope.gainOut * oscillator.out) -> out;
        */

        eventIn-> noteToFrequency -> myOscillator.note;
        eventIn-> eventToVelocity -> myOscillator.velocity;
        eventIn -> envelope.eventIn;
        (envelope.gainOut * myOscillator.out) -> out;
    }
}

// Determine the note frequency from the pitch (midi note)
processor NoteToFrequency
{
    input event std::notes::NoteOn eventIn;
    output event float32 frequencyOut;

    event eventIn (std::notes::NoteOn e)
    {
        frequencyOut <- std::notes::noteToFrequency (e.pitch);
    }
}

processor EventToVelocity
{
    input event std::notes::NoteOn eventIn;
    output event float32 velocityOut;

    event eventIn (std::notes::NoteOn e)
    {
        velocityOut <- e.velocity;
    }
}

processor my_oscillator
{
    input event float32 note;
    input event float32 velocity;
    output stream float out;

    const float TWO_PI = 6.2831853071795864f;
    float amplitude;
    float freq;
    float sampleRate;
    float phaseOffset;
    int sampleIndex;
    my_std_sine::sine() stdSine;

    event note(float32 note)
    {
        freq = 261.63f;
    }

    event velocity(float32 velocity)
    {
        amplitude = (velocity / 127.0f) * 0.5f;
    }

    void init()
    {
        sampleIndex = 0;
        sampleRate = 44100.0f;
        phaseOffset = 0.0f;
    }

    void main()
    {
        loop
        {
            float oscOut = amplitude * stdSine(
                TWO_PI * sampleIndex * freq / sampleRate + phaseOffset
            );
            out <- oscOut;
            advance();
        }
    }
}

processor my_std_sine
{
    input stream float32 x;
    output stream float32 y;

    float32 factorial(int n)
    {
        float32 result = 1.0f;
        for (int i = 1; i <= n; ++i)
        {
            result *= float32(i);
        }
        return result;
    }

    float32 power(float32 base, int exponent)
    {
        float32 result = 1.0f;
        for (int i = 0; i < exponent; ++i)
        {
            result *= base;
        }
        return result;
    }

    float32 sine(float32 x)
    {
        // Using 10 terms for approximation
        float32 sum = 0.0f;
        int sign = 1;
        for (int i = 0; i < 10; ++i)
        {
            int termIndex = 2 * i + 1;
            sum += sign * (power(x, termIndex) / factorial(termIndex));
            sign = -sign;
        }
        return sum;
    }

    void main()
    {
        y = sine(x);
    }
}


