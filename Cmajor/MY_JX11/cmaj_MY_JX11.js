//==============================================================================
//
//  This file contains a Javascript/Webassembly/WebAudio export of the Cmajor
//  patch 'MY_JX11.cmajorpatch'.
//
//  This file was auto-generated by the Cmajor toolkit v1.0.2397
//
//  To use it, import this module into your HTML/Javascript code and call
//  `createAudioWorkletNodePatchConnection()`. The AudioWorkletPatchConnection
//  object that is returned is a PatchConnection with some extra functionality
//  to let you connect it to web audio/MIDI.
//
//  For more details about Cmajor, visit https://cmajor.dev
//
//==============================================================================

import * as helpers from "./cmaj_api/cmaj_audio_worklet_helper.js"


//==============================================================================
/** This exports the patch's manifest, in case a caller needs to find out about its properties.
 */
export const manifest =
{
  "CmajorVersion": 1,
  "ID": "com.your_name.your_patch_ID",
  "version": "1.0",
  "name": "MY_JX11",
  "description": "MY_JX11",
  "category": "generator",
  "manufacturer": "Your Company Goes Here",
  "isInstrument": true,
  "source": "MY_JX11.cmajor"
};

/** Returns the patch's output endpoint list */
export function getOutputEndpoints() { return MY_JX11.prototype.getOutputEndpoints(); }

/** Returns the patch's input endpoint list */
export function getInputEndpoints()  { return MY_JX11.prototype.getInputEndpoints(); }

//==============================================================================
/**  Creates an audio worklet node for the patch with the given name, attaches it
 *   to the audio context provided, and returns an object containing the node
 *   and a PatchConnection class to control it.
 *
 *   @param {AudioContext} audioContext - a web audio AudioContext object
 *   @param {string} workletName - the name to give the new worklet that is created
 *   @returns {AudioWorkletPatchConnection} an AudioWorkletPatchConnection which has been initialised
 */
export async function createAudioWorkletNodePatchConnection (audioContext, workletName)
{
  const connection = new helpers.AudioWorkletPatchConnection (manifest);
  await connection.initialise (MY_JX11, audioContext, workletName, Date.now() & 0x7fffffff);
  return connection;
}

/***********************************************************************************
 *
 *   A Javascript/Webassembly implementation of the Cmajor processor 'MY_JX11'.
 *
 *   This class was auto-generated by the Cmajor toolkit.
 *
 *   To use it, construct an instance of this class, and call `initialise()` to
 *   asynchronously prepare it for use. Once initialised, the class provides
 *   appropriate setter/getter methods for reading/writing data to its endpoints,
 *   and an `advance()` method to render the next block.
 *
 *   This roughly mirrors functionality of the cmajor Performer API - see the
 *   C++ API classes and Cmajor docs for more information about how this is used.
 */
class MY_JX11
{
  /** After constructing one of these objects, call its
   *  initialise() method to prepare it for use.
   */
  constructor()
  {
  }

  //==============================================================================
  /** Prepares this processor for use.
   *
   *  @param {number} sessionID - A unique integer ID which will be used for `processor.session`.
   *  @param {number} frequency - The frequency in Hz that the processor will be expected to run at.
   */
  async initialise (sessionID, frequency)
  {
    if (! ((sessionID ^ 0) > 1))
      throw new Error ("initialise() requires a valid non-zero session ID argument");

    if (! (frequency > 1))
      throw new Error ("initialise() requires a valid frequency argument");

    const memory = new WebAssembly.Memory ({ initial: 3 });
    const stack = new WebAssembly.Global ({ value: "i32", mutable: true }, 71696);

    const imports = {
      env: {
        __linear_memory: memory,
        __memory_base: 0,
        __stack_pointer: stack,
        __table_base: 0,
        memcpy:  (dst, src, len) => { this.byteMemory.copyWithin (dst, src, src + len); return dst; },
        memmove: (dst, src, len) => { this.byteMemory.copyWithin (dst, src, src + len); return dst; },
        memset:  (dst, value, len) => { this.byteMemory.fill (value, dst, dst + len); return dst; }
      },
    };

    const result = await WebAssembly.instantiate (this._getWasmBytes(), imports);
    this.instance = result.instance;
    const exports = this.instance.exports;

    const memoryBuffer = exports.memory?.buffer || memory.buffer;
    this.byteMemory = new Uint8Array (memoryBuffer);
    this.memoryDataView = new DataView (memoryBuffer);

    if (exports.advanceBlock)
      this._advance = numFrames => exports.advanceBlock (71696, 72128, numFrames);
    else
      this._advance = () => exports.advanceOneFrame (71696, 72128);

    exports.initialise?.(71696, 74176, sessionID, frequency);
    return true;
  }

  //==============================================================================
  /** Advances the processor by a number of frames.
   *
   *  Before calling `advance()` you should use the appropriate functions to
   *  push data and events into the processor's input endpoints. After calling
   *  `advance()` you can use its output endpoint access functions to read the
   *  results.
   *
   *  @param {number} numFrames - An integer number of frames to advance.
   *                              This must be greater than zero.
   */
  advance (numFrames)
  {
    this.byteMemory.fill (0, 72128, 72128 + numFrames * 4);
    this._advance (numFrames);
  }

  //==============================================================================
  /** Returns an object which encapsulates the state of the patch at this point.
   *  The state can be restored by passing this object to `restoreState()`.
   */
  getState()
  {
    return { memory: this.byteMemory.slice(0) };
  }

  /** Restores the patch to a state that was previously saved by a call to `getState()`
   */
  restoreState (savedState)
  {
    if (savedState?.memory && savedState.memory?.length === this.byteMemory.length)
      this.byteMemory.set (savedState.memory);
    else
      throw Error ("restoreState(): not a valid state object");
  }

  /** Returns a list of the output endpoints that this processor exposes.
   *  @returns {Array}
   */
  getOutputEndpoints()
  {
    return [
      {
        "endpointID": "out",
        "endpointType": "stream",
        "dataType": {
          "type": "float32"
        },
        "purpose": "audio out",
        "numAudioChannels": 1
      }
    ];
  }

  /** Returns a list of the input endpoints that this processor exposes.
   *  @returns {Array}
   */
  getInputEndpoints()
  {
    return [
      {
        "endpointID": "midiIn",
        "endpointType": "event",
        "dataType": {
          "type": "object",
          "class": "Message",
          "members": {
            "message": {
              "type": "int32"
            }
          }
        },
        "purpose": "midi in"
      }
    ];
  }

  /** Sends an event of type `std::midi::Message` to endpoint "midiIn".
   *  @param {Object} eventValue - The event to be added to the queue for this endpoint.
   */
  sendInputEvent_midiIn (eventValue)
  {
    this._pack_o1_Message_message_i32 (74176, eventValue);
    this.instance.exports._sendEvent_midiIn (71696, 74176);
  }

  /** Returns a frame from the output stream "out"
   *
   * @param {number} frameIndex - the index of the frame to fetch
   */
  getOutputFrame_out (frameIndex)
  {
    return this.memoryDataView.getFloat32 (72128 + frameIndex * 4, true);
  }

  /** Copies frames from the output stream "out" into a destination array.
   *
   * @param {Array} destChannelArrays   - An array of arrays (one per channel) into
   *                                      which the samples will be copied
   * @param {number} maxNumFramesToRead - The maximum number of frames to copy
   * @param {number} destChannel        - The channel to start writing from
   */
  getOutputFrames_out (destChannelArrays, maxNumFramesToRead, destChannel)
  {
    let source = 72128;

    if (maxNumFramesToRead > 512)
      maxNumFramesToRead = 512;

    const channelsToCopy = Math.min (1, destChannelArrays.length - destChannel);

    for (let frame = 0; frame < maxNumFramesToRead; ++frame)
    {
      for (let channel = 0; channel < channelsToCopy; ++channel)
        destChannelArrays[destChannel + channel][frame] = this.memoryDataView.getFloat32 (source + 4 * channel, true);

      source += 4;
    }
  }

  //==============================================================================
  // Code beyond this point is private internal implementation detail

  //==============================================================================
  /** @access private */
  _pack_o1_Message_message_i32 (address, newValue)
  {
    this.memoryDataView.setInt32 (address, newValue.message, true);
  }

  /** @access private */
  _getWasmBytes()
  {
    return new Uint8Array([0,97,115,109,1,0,0,0,1,159,128,128,128,0,5,96,2,127,127,0,96,4,127,127,127,124,0,96,3,127,127,127,0,96,2,125,125,1,125,96,2,125,127,1,125,2,175,128,128,128,0,2,3,101,110,118,15,95,
      95,108,105,110,101,97,114,95,109,101,109,111,114,121,2,0,1,3,101,110,118,15,95,95,115,116,97,99,107,95,112,111,105,110,116,101,114,3,127,1,3,134,128,128,128,0,5,0,1,2,3,4,7,177,128,128,128,0,3,17,95,115,
      101,110,100,69,118,101,110,116,95,109,105,100,105,73,110,0,0,10,105,110,105,116,105,97,108,105,115,101,0,1,12,97,100,118,97,110,99,101,66,108,111,99,107,0,2,12,129,128,128,128,0,1,10,132,172,128,128,0,
      5,204,21,4,2,127,2,125,2,127,1,126,2,64,32,1,40,2,0,34,1,65,128,128,192,7,113,34,2,65,128,128,192,4,71,13,0,32,1,65,255,1,113,69,13,0,32,1,65,16,118,65,15,113,33,3,32,1,65,255,0,113,178,67,4,2,1,60,148,
      33,4,32,1,65,8,118,65,255,0,113,178,33,5,2,64,32,0,65,152,2,106,65,7,65,6,65,5,65,4,65,3,65,2,32,0,65,176,2,106,40,2,0,34,1,32,0,65,160,2,106,40,2,0,34,2,72,34,6,32,0,65,192,2,106,40,2,0,34,7,32,1,32,2,
      32,6,27,34,1,72,34,2,27,32,0,65,208,2,106,40,2,0,34,6,32,7,32,1,32,2,27,34,1,72,34,2,27,32,0,65,224,2,106,40,2,0,34,7,32,6,32,1,32,2,27,34,1,72,34,2,27,32,0,65,240,2,106,40,2,0,34,6,32,7,32,1,32,2,27,34,
      1,72,34,2,27,32,0,65,128,3,106,40,2,0,34,7,32,6,32,1,32,2,27,34,1,72,34,2,27,32,0,65,144,3,106,40,2,0,32,7,32,1,32,2,27,72,27,34,2,65,4,116,106,34,1,45,0,0,69,13,0,32,0,32,2,65,5,116,106,65,28,106,65,0,
      54,2,0,11,32,1,32,3,54,2,4,32,1,65,1,58,0,0,32,1,65,0,58,0,1,32,1,32,5,56,2,12,32,0,32,2,65,5,116,106,65,28,106,32,4,56,2,0,32,0,65,152,3,106,34,0,32,0,40,2,0,65,1,106,34,0,54,2,0,32,1,32,0,54,2,8,15,11,
      2,64,2,64,2,64,2,64,32,2,65,128,128,128,4,70,13,0,32,1,65,255,129,192,7,113,65,128,128,192,4,71,13,1,11,66,1,32,1,65,16,118,65,15,113,34,2,173,134,33,8,32,1,65,8,118,65,255,0,113,178,33,4,32,0,65,156,2,
      106,40,2,0,32,2,71,13,1,32,0,65,164,2,106,42,2,0,32,4,92,13,1,2,64,2,64,32,0,45,0,160,3,13,0,32,0,41,3,168,3,32,8,131,80,13,1,11,32,0,65,153,2,106,65,1,58,0,0,12,2,11,32,0,65,0,58,0,152,2,32,0,65,28,106,
      65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,160,2,106,32,1,54,2,0,12,1,11,32,2,65,128,128,192,5,71,13,1,32,1,65,8,118,65,255,0,113,34,2,65,202,0,70,13,1,32,2,65,192,0,71,13,1,66,1,
      32,1,65,16,118,65,15,113,34,2,173,134,33,8,2,64,32,1,65,255,0,113,178,67,4,2,1,60,148,67,0,0,0,63,96,69,13,0,32,0,32,0,41,3,168,3,32,8,132,55,3,168,3,32,2,13,2,32,0,65,160,3,106,65,1,58,0,0,15,11,32,0,
      32,0,41,3,168,3,32,8,66,127,133,131,55,3,168,3,2,64,32,2,69,13,0,2,64,32,0,65,156,2,106,40,2,0,32,2,71,13,0,32,0,45,0,152,2,69,13,0,32,0,65,153,2,106,45,0,0,69,13,0,32,0,65,0,58,0,152,2,32,0,65,28,106,
      65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,160,2,106,32,1,54,2,0,11,2,64,32,0,65,172,2,106,40,2,0,32,2,71,13,0,32,0,45,0,168,2,69,13,0,32,0,65,169,2,106,45,0,0,69,13,0,32,0,65,0,
      58,0,168,2,32,0,65,60,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,176,2,106,32,1,54,2,0,11,2,64,32,0,65,188,2,106,40,2,0,32,2,71,13,0,32,0,45,0,184,2,69,13,0,32,0,65,185,2,106,
      45,0,0,69,13,0,32,0,65,0,58,0,184,2,32,0,65,220,0,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,192,2,106,32,1,54,2,0,11,2,64,32,0,65,204,2,106,40,2,0,32,2,71,13,0,32,0,45,0,200,
      2,69,13,0,32,0,65,201,2,106,45,0,0,69,13,0,32,0,65,0,58,0,200,2,32,0,65,252,0,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,208,2,106,32,1,54,2,0,11,2,64,32,0,65,220,2,106,40,2,
      0,32,2,71,13,0,32,0,45,0,216,2,69,13,0,32,0,65,217,2,106,45,0,0,69,13,0,32,0,65,0,58,0,216,2,32,0,65,156,1,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,224,2,106,32,1,54,2,0,11,
      2,64,32,0,65,236,2,106,40,2,0,32,2,71,13,0,32,0,45,0,232,2,69,13,0,32,0,65,233,2,106,45,0,0,69,13,0,32,0,65,0,58,0,232,2,32,0,65,188,1,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,
      65,240,2,106,32,1,54,2,0,11,2,64,32,0,65,252,2,106,40,2,0,32,2,71,13,0,32,0,45,0,248,2,69,13,0,32,0,65,249,2,106,45,0,0,69,13,0,32,0,65,0,58,0,248,2,32,0,65,220,1,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,
      1,106,34,1,54,2,156,3,32,0,65,128,3,106,32,1,54,2,0,11,32,0,65,140,3,106,40,2,0,32,2,71,13,2,32,0,45,0,136,3,69,13,2,32,0,65,137,3,106,45,0,0,69,13,2,32,0,65,0,58,0,136,3,32,0,65,252,1,106,65,0,54,2,0,
      32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,144,3,106,32,1,54,2,0,15,11,32,0,65,160,3,106,65,0,58,0,0,2,64,32,0,45,0,152,2,69,13,0,32,0,65,153,2,106,45,0,0,69,13,0,32,0,65,0,58,0,152,2,32,0,65,
      28,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,160,2,106,32,1,54,2,0,11,2,64,32,0,65,168,2,106,45,0,0,69,13,0,32,0,65,169,2,106,45,0,0,69,13,0,32,0,65,0,58,0,168,2,32,0,65,60,
      106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,176,2,106,32,1,54,2,0,11,2,64,32,0,65,184,2,106,45,0,0,69,13,0,32,0,65,185,2,106,45,0,0,69,13,0,32,0,65,0,58,0,184,2,32,0,65,220,0,
      106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,192,2,106,32,1,54,2,0,11,2,64,32,0,65,200,2,106,45,0,0,69,13,0,32,0,65,201,2,106,45,0,0,69,13,0,32,0,65,0,58,0,200,2,32,0,65,252,0,
      106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,208,2,106,32,1,54,2,0,11,2,64,32,0,65,216,2,106,45,0,0,69,13,0,32,0,65,217,2,106,45,0,0,69,13,0,32,0,65,0,58,0,216,2,32,0,65,156,1,
      106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,224,2,106,32,1,54,2,0,11,2,64,32,0,65,232,2,106,45,0,0,69,13,0,32,0,65,233,2,106,45,0,0,69,13,0,32,0,65,0,58,0,232,2,32,0,65,188,1,
      106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,240,2,106,32,1,54,2,0,11,2,64,32,0,65,248,2,106,45,0,0,69,13,0,32,0,65,249,2,106,45,0,0,69,13,0,32,0,65,0,58,0,248,2,32,0,65,220,1,
      106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,128,3,106,32,1,54,2,0,11,32,0,65,136,3,106,45,0,0,69,13,1,32,0,65,137,3,106,45,0,0,69,13,1,32,0,65,0,58,0,136,3,32,0,65,252,1,106,65,
      0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,144,3,106,32,1,54,2,0,12,1,11,2,64,32,0,65,172,2,106,40,2,0,32,2,71,13,0,32,0,65,180,2,106,42,2,0,32,4,92,13,0,2,64,32,0,45,0,160,3,13,0,32,
      0,41,3,168,3,32,8,131,66,0,82,13,0,32,0,65,0,58,0,168,2,32,0,65,60,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,176,2,106,32,1,54,2,0,12,1,11,32,0,65,169,2,106,65,1,58,0,0,11,2,
      64,32,0,65,188,2,106,40,2,0,32,2,71,13,0,32,0,65,196,2,106,42,2,0,32,4,92,13,0,2,64,32,0,45,0,160,3,13,0,32,0,41,3,168,3,32,8,131,66,0,82,13,0,32,0,65,0,58,0,184,2,32,0,65,220,0,106,65,0,54,2,0,32,0,32,
      0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,192,2,106,32,1,54,2,0,12,1,11,32,0,65,185,2,106,65,1,58,0,0,11,2,64,32,0,65,204,2,106,40,2,0,32,2,71,13,0,32,0,65,212,2,106,42,2,0,32,4,92,13,0,2,64,32,0,45,
      0,160,3,13,0,32,0,41,3,168,3,32,8,131,66,0,82,13,0,32,0,65,0,58,0,200,2,32,0,65,252,0,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,208,2,106,32,1,54,2,0,12,1,11,32,0,65,201,2,106,
      65,1,58,0,0,11,2,64,32,0,65,220,2,106,40,2,0,32,2,71,13,0,32,0,65,228,2,106,42,2,0,32,4,92,13,0,2,64,32,0,45,0,160,3,13,0,32,0,41,3,168,3,32,8,131,66,0,82,13,0,32,0,65,0,58,0,216,2,32,0,65,156,1,106,65,
      0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,224,2,106,32,1,54,2,0,12,1,11,32,0,65,217,2,106,65,1,58,0,0,11,2,64,32,0,65,236,2,106,40,2,0,32,2,71,13,0,32,0,65,244,2,106,42,2,0,32,4,92,
      13,0,2,64,32,0,45,0,160,3,13,0,32,0,41,3,168,3,32,8,131,66,0,82,13,0,32,0,65,0,58,0,232,2,32,0,65,188,1,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,240,2,106,32,1,54,2,0,12,1,
      11,32,0,65,233,2,106,65,1,58,0,0,11,2,64,32,0,65,252,2,106,40,2,0,32,2,71,13,0,32,0,65,132,3,106,42,2,0,32,4,92,13,0,2,64,32,0,45,0,160,3,13,0,32,0,41,3,168,3,32,8,131,66,0,82,13,0,32,0,65,0,58,0,248,2,
      32,0,65,220,1,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,128,3,106,32,1,54,2,0,12,1,11,32,0,65,249,2,106,65,1,58,0,0,11,32,0,65,140,3,106,40,2,0,32,2,71,13,0,32,0,65,148,3,106,
      42,2,0,32,4,92,13,0,2,64,32,0,45,0,160,3,13,0,32,0,41,3,168,3,32,8,131,66,0,82,13,0,32,0,65,0,58,0,136,3,32,0,65,252,1,106,65,0,54,2,0,32,0,32,0,40,2,156,3,65,1,106,34,1,54,2,156,3,32,0,65,144,3,106,32,
      1,54,2,0,15,11,32,0,65,137,3,106,65,1,58,0,0,15,11,11,217,1,0,65,0,32,3,57,3,128,128,128,128,0,32,0,65,144,2,106,65,206,173,1,54,2,0,32,0,65,248,1,106,65,7,54,2,0,32,0,65,240,1,106,65,206,173,1,54,2,0,
      32,0,65,216,1,106,65,6,54,2,0,32,0,65,208,1,106,65,206,173,1,54,2,0,32,0,65,184,1,106,65,5,54,2,0,32,0,65,176,1,106,65,206,173,1,54,2,0,32,0,65,152,1,106,65,4,54,2,0,32,0,65,144,1,106,65,206,173,1,54,2,
      0,32,0,65,248,0,106,65,3,54,2,0,32,0,65,240,0,106,65,206,173,1,54,2,0,32,0,65,216,0,106,65,2,54,2,0,32,0,65,208,0,106,65,206,173,1,54,2,0,32,0,65,56,106,65,1,54,2,0,32,0,65,48,106,65,206,173,1,54,2,0,32,
      0,65,24,106,65,0,54,2,0,32,0,65,152,3,106,66,128,128,128,128,23,55,2,0,11,175,6,4,6,127,2,125,8,127,1,125,35,128,128,128,128,0,65,32,107,34,3,36,128,128,128,128,0,2,64,32,0,40,2,0,32,2,70,13,0,32,3,65,
      24,106,33,4,32,3,65,16,106,33,5,32,3,65,8,106,33,6,3,64,32,4,66,0,55,3,0,32,5,66,0,55,3,0,32,6,66,0,55,3,0,32,3,66,0,55,3,0,65,0,33,7,3,64,32,7,65,2,116,33,8,67,0,0,0,0,33,9,67,0,0,0,0,33,10,2,64,32,0,
      32,7,65,5,116,106,34,11,65,44,106,34,12,40,2,0,34,13,65,127,70,13,0,32,11,65,28,106,33,14,32,11,65,40,106,33,15,32,11,65,32,106,33,16,32,11,65,36,106,33,17,2,64,3,64,2,64,2,64,2,64,2,64,2,64,32,13,65,1,
      74,13,0,67,0,0,0,0,33,10,32,14,42,2,0,67,0,0,0,0,92,13,1,65,1,33,13,12,6,11,65,0,33,18,32,13,65,2,70,13,1,32,13,65,4,73,33,18,65,0,33,13,32,18,69,13,3,32,14,42,2,0,33,10,65,0,33,18,12,2,11,2,64,2,64,65,
      0,43,3,128,128,128,128,0,182,67,10,215,35,60,148,34,10,139,67,0,0,0,79,93,69,13,0,32,10,168,33,18,12,1,11,65,128,128,128,128,120,33,18,11,32,17,67,0,0,0,64,67,0,0,128,63,32,18,178,149,34,10,140,16,131,
      128,128,128,0,32,14,42,2,0,67,0,0,0,64,146,32,10,16,131,128,128,128,0,148,56,2,0,65,0,32,13,32,13,65,1,70,27,33,18,11,32,16,42,2,0,34,19,32,14,42,2,0,34,10,93,69,13,0,32,16,32,19,67,0,0,0,64,146,32,17,
      42,2,0,148,67,0,0,0,192,146,56,2,0,32,19,67,0,0,0,0,146,33,10,65,2,33,13,12,3,11,2,64,32,10,67,0,0,0,0,94,32,10,67,0,0,0,0,93,114,65,1,71,13,0,32,16,42,2,0,67,0,0,0,0,146,33,10,65,3,33,13,12,3,11,32,15,
      67,23,183,209,56,68,0,0,0,0,0,0,240,63,65,0,43,3,128,128,128,128,0,163,182,67,205,204,204,61,149,16,131,128,128,128,0,56,2,0,32,18,33,13,11,32,14,42,2,0,67,0,0,0,0,92,13,0,32,16,42,2,0,34,10,67,23,183,
      209,56,94,69,13,0,11,32,16,32,10,32,15,42,2,0,148,56,2,0,32,10,67,0,0,0,0,146,33,10,65,4,33,13,11,32,12,32,13,54,2,0,11,32,3,32,8,106,33,13,2,64,32,11,65,52,106,34,14,40,2,0,65,127,70,13,0,32,14,65,1,54,
      2,0,32,11,65,48,106,34,14,32,14,40,2,0,65,181,136,206,221,0,108,65,235,198,229,176,3,106,34,14,54,2,0,32,14,65,7,117,65,128,128,128,120,106,178,67,0,0,128,51,148,67,0,0,0,0,146,33,9,11,32,13,32,13,42,2,
      0,32,10,32,9,148,146,56,2,0,32,7,65,1,106,34,7,65,8,71,13,0,11,32,1,32,0,40,2,0,65,2,116,106,32,3,42,2,0,67,0,0,0,0,146,32,3,42,2,4,146,32,3,42,2,8,146,32,3,42,2,12,146,32,3,42,2,16,146,32,3,42,2,20,146,
      32,3,42,2,24,146,32,3,42,2,28,146,56,2,0,32,0,32,0,40,2,0,65,1,106,34,13,54,2,0,32,13,32,2,71,13,0,11,11,32,0,65,0,54,2,0,32,3,65,32,106,36,128,128,128,128,0,11,129,13,3,1,125,7,127,4,125,67,0,0,128,63,
      33,2,2,64,32,1,188,34,3,65,255,255,255,255,7,113,34,4,69,13,0,32,0,188,34,5,65,128,128,128,252,3,70,13,0,2,64,2,64,32,5,65,255,255,255,255,7,113,34,6,65,128,128,128,252,7,75,13,0,32,4,65,129,128,128,252,
      7,73,13,1,11,32,0,32,1,146,15,11,2,64,2,64,32,5,65,127,76,13,0,65,0,33,7,12,1,11,65,2,33,7,32,4,65,128,128,128,220,4,79,13,0,2,64,32,4,65,128,128,128,252,3,79,13,0,65,0,33,7,12,1,11,65,0,33,7,32,4,65,150,
      1,32,4,65,23,118,107,34,8,118,34,9,32,8,116,32,4,71,13,0,65,2,32,9,65,1,113,107,33,7,11,2,64,2,64,32,4,65,128,128,128,252,3,70,13,0,32,4,65,128,128,128,252,7,71,13,1,32,6,65,128,128,128,252,3,70,13,2,2,
      64,32,6,65,129,128,128,252,3,73,13,0,32,1,67,0,0,0,0,32,3,65,127,74,27,15,11,67,0,0,0,0,32,1,140,32,3,65,127,74,27,15,11,67,0,0,128,63,32,0,149,32,0,32,3,65,0,72,27,15,11,2,64,2,64,32,3,65,128,128,128,
      248,3,70,13,0,32,3,65,128,128,128,128,4,71,13,1,32,0,32,0,148,15,11,32,5,65,0,72,13,0,32,0,145,15,11,32,0,139,33,2,2,64,2,64,2,64,32,5,65,127,74,13,0,32,5,65,128,128,128,128,120,70,13,1,32,5,65,128,128,
      128,252,123,70,13,1,32,5,65,128,128,128,124,70,13,1,12,2,11,32,5,69,13,0,32,5,65,128,128,128,252,7,70,13,0,32,5,65,128,128,128,252,3,71,13,1,11,67,0,0,128,63,32,2,149,32,2,32,3,65,0,72,27,33,2,32,5,65,
      0,78,13,1,2,64,32,7,32,6,65,128,128,128,132,124,106,114,13,0,32,2,32,2,147,34,1,32,1,149,15,11,32,2,140,32,2,32,7,65,1,70,27,15,11,67,0,0,128,63,33,10,2,64,32,5,65,0,78,13,0,2,64,2,64,32,7,14,2,0,1,2,11,
      32,0,32,0,147,34,1,32,1,149,15,11,67,0,0,128,191,33,10,11,2,64,2,64,2,64,2,64,2,64,2,64,32,4,65,128,128,128,232,4,77,13,0,32,6,65,248,255,255,251,3,79,13,1,32,10,67,202,242,73,113,148,67,202,242,73,113,
      148,32,10,67,96,66,162,13,148,67,96,66,162,13,148,32,3,65,0,72,27,15,11,32,2,67,0,0,128,75,148,188,32,6,32,6,65,128,128,128,4,73,34,7,27,34,6,65,255,255,255,3,113,34,5,65,128,128,128,252,3,114,33,4,65,
      233,126,65,129,127,32,7,27,32,6,65,23,117,106,33,6,65,0,33,7,32,5,65,242,136,243,0,79,13,1,65,1,33,5,12,2,11,2,64,32,6,65,136,128,128,252,3,73,13,0,32,10,67,202,242,73,113,148,67,202,242,73,113,148,32,
      10,67,96,66,162,13,148,67,96,66,162,13,148,32,3,65,0,74,27,15,11,32,2,67,0,0,128,191,146,34,0,67,112,165,236,54,148,32,0,32,0,148,67,0,0,0,63,32,0,32,0,67,0,0,128,190,148,67,171,170,170,62,146,148,147,
      148,67,59,170,184,191,148,146,34,2,32,2,32,0,67,0,170,184,63,148,34,11,146,188,65,128,96,113,190,34,0,32,11,147,147,33,11,12,3,11,2,64,32,5,65,215,231,246,2,79,13,0,67,0,0,192,63,33,0,65,0,33,5,65,128,
      128,128,1,33,7,12,2,11,32,5,65,128,128,128,248,3,114,33,4,65,1,33,5,32,6,65,1,106,33,6,65,0,33,7,11,67,0,0,128,63,33,0,11,67,0,0,0,0,67,220,207,209,53,32,5,27,67,0,0,128,63,32,0,32,4,190,34,12,146,149,
      34,2,32,12,32,0,147,34,11,32,4,65,1,118,65,128,224,255,255,1,113,32,7,106,65,128,128,128,130,2,106,190,34,13,32,11,32,2,148,34,11,188,65,128,96,113,190,34,2,148,147,32,12,32,13,32,0,147,147,32,2,148,147,
      148,34,0,32,2,32,2,148,34,12,67,0,0,64,64,146,32,0,32,11,32,2,146,148,32,11,32,11,148,34,0,32,0,148,32,0,32,0,32,0,32,0,32,0,67,66,241,83,62,148,67,85,50,108,62,146,148,67,5,163,139,62,146,148,67,171,170,
      170,62,146,148,67,183,109,219,62,146,148,67,154,153,25,63,146,148,146,34,13,146,188,65,128,96,113,190,34,0,148,32,11,32,13,32,0,67,0,0,64,192,146,32,12,147,147,148,146,34,11,32,11,32,2,32,0,148,34,2,146,
      188,65,128,96,113,190,34,0,32,2,147,147,67,79,56,118,63,148,32,0,67,198,35,246,184,148,146,146,34,2,67,0,0,0,0,67,0,192,21,63,32,5,27,34,11,32,2,32,0,67,0,64,118,63,148,34,12,146,146,32,6,178,34,2,146,
      188,65,128,96,113,190,34,0,32,2,147,32,11,147,32,12,147,147,33,11,11,2,64,32,0,32,3,65,128,96,113,190,34,2,148,34,12,32,11,32,1,148,32,1,32,2,147,32,0,148,146,34,1,146,34,0,188,34,4,65,128,128,128,152,
      4,76,13,0,32,10,67,202,242,73,113,148,67,202,242,73,113,148,15,11,2,64,2,64,2,64,32,4,65,128,128,128,152,4,71,13,0,65,128,128,128,152,4,33,5,32,1,67,60,170,56,51,146,32,0,32,12,147,94,69,13,1,32,10,67,
      202,242,73,113,148,67,202,242,73,113,148,15,11,2,64,2,64,32,4,65,255,255,255,255,7,113,34,5,65,128,128,216,152,4,75,13,0,32,4,65,128,128,216,152,124,71,13,1,32,1,32,0,32,12,147,95,69,13,1,32,10,67,96,66,
      162,13,148,67,96,66,162,13,148,15,11,32,10,67,96,66,162,13,148,67,96,66,162,13,148,15,11,65,0,33,3,32,5,65,128,128,128,248,3,77,13,1,11,65,0,65,128,128,128,4,32,5,65,23,118,65,130,127,106,118,32,4,106,
      34,5,65,255,255,255,3,113,65,128,128,128,4,114,65,150,1,32,5,65,23,118,65,255,1,113,34,6,107,118,34,3,107,32,3,32,4,65,0,72,27,33,3,32,1,32,12,65,128,128,128,124,32,6,65,129,127,106,117,32,5,113,190,147,
      34,12,146,188,33,4,11,2,64,32,3,65,23,116,32,4,65,128,128,126,113,190,34,0,67,0,114,49,63,148,34,2,32,0,67,140,190,191,53,148,32,1,32,0,32,12,147,147,67,24,114,49,63,148,146,34,11,146,34,1,32,1,32,1,32,
      1,32,1,148,34,0,32,0,32,0,32,0,32,0,67,76,187,49,51,148,67,14,234,221,181,146,148,67,85,179,138,56,146,148,67,97,11,54,187,146,148,67,171,170,42,62,146,148,147,34,0,148,32,0,67,0,0,0,192,146,149,32,11,
      32,1,32,2,147,147,34,0,32,1,32,0,148,146,147,147,67,0,0,128,63,146,34,1,188,106,34,4,65,255,255,255,3,74,13,0,32,10,32,1,32,3,16,132,128,128,128,0,148,15,11,32,10,32,4,190,148,33,2,11,32,2,11,164,1,1,1,
      127,2,64,2,64,2,64,32,1,65,128,1,72,13,0,32,0,67,0,0,0,127,148,33,0,32,1,65,129,127,106,34,2,65,255,0,75,13,1,32,2,33,1,12,2,11,32,1,65,130,127,78,13,1,32,0,67,0,0,128,12,148,33,0,2,64,32,1,65,155,126,
      77,13,0,32,1,65,230,0,106,33,1,12,2,11,32,0,67,0,0,128,12,148,33,0,32,1,65,182,125,32,1,65,182,125,74,27,65,204,1,106,33,1,12,1,11,32,0,67,0,0,0,127,148,33,0,32,1,65,253,2,32,1,65,253,2,72,27,65,130,126,
      106,33,1,11,32,0,32,1,65,23,116,65,128,128,128,252,3,106,190,148,11,11,142,128,128,128,0,1,0,65,0,11,8,0,0,0,0,0,0,0,0,0,244,129,128,128,0,7,108,105,110,107,105,110,103,2,8,202,129,128,128,0,7,0,32,0,17,
      95,115,101,110,100,69,118,101,110,116,95,109,105,100,105,73,110,0,32,1,10,105,110,105,116,105,97,108,105,115,101,1,2,12,46,76,95,102,114,101,113,117,101,110,99,121,0,0,8,0,32,2,12,97,100,118,97,110,99,
      101,66,108,111,99,107,2,16,0,0,2,3,54,46,76,115,116,100,95,95,105,110,116,114,105,110,115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,116,97,
      116,105,111,110,115,95,95,112,111,119,0,2,4,67,46,76,115,116,100,95,95,105,110,116,114,105,110,115,105,99,115,95,95,105,110,116,101,114,110,97,108,95,95,109,97,116,104,95,105,109,112,108,101,109,101,110,
      116,97,116,105,111,110,115,95,95,104,101,108,112,101,114,115,95,95,115,99,97,108,98,110,102,5,149,128,128,128,0,1,17,46,98,115,115,46,46,76,95,102,114,101,113,117,101,110,99,121,3,0,0,184,128,128,128,0,
      10,114,101,108,111,99,46,67,79,68,69,5,10,3,216,21,2,0,7,182,23,4,7,193,23,4,3,184,25,2,0,0,245,25,5,0,136,26,5,3,154,27,2,0,0,168,27,5,7,213,29,4,0,202,42,6,]);
  }
}
